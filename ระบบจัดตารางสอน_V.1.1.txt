CodeGS
// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Sheet ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π "üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô"
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu("üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")
    .addItem("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô", "showScheduleForm")
    .addToUi();
}

// ‡πÅ‡∏™‡∏î‡∏á Sidebar Form
function showScheduleForm() {
  const html = HtmlService.createHtmlOutputFromFile("ScheduleForm")
    .setTitle("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")
    .setWidth(400);
  SpreadsheetApp.getUi().showSidebar(html);
}

// ‡∏î‡∏∂‡∏á dropdown list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
function getDropdownData() {
  const ss = SpreadsheetApp.getActive();
  const getList = (sheetName) => {
    const sheet = ss.getSheetByName(sheetName);
    return sheet.getRange(2, 1, sheet.getLastRow()-1, 1).getValues().flat();
  };
  return {
    teachers: getList("Teachers"),
    rooms: getList("Rooms"),
    weekdays: getList("Weekdays")
  };
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç (0 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå, 1 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ... 6 = ‡πÄ‡∏™‡∏≤‡∏£‡πå)
function getDayNumber(thaiDay) {
  const map = {
    "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå": 0, "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": 1, "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": 2, "‡∏û‡∏∏‡∏ò": 3, "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ": 4, "‡∏®‡∏∏‡∏Å‡∏£‡πå": 5, "‡πÄ‡∏™‡∏≤‡∏£‡πå": 6
  };
  return map[thaiDay] ?? -1;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
function isHoliday(date) {
  const holidays = SpreadsheetApp.getActive().getSheetByName("HolidayList")
    .getRange(2, 1, SpreadsheetApp.getActive().getSheetByName("HolidayList").getLastRow()-1, 1)
    .getValues().flat().map(d => new Date(d).toDateString());
  return holidays.includes(new Date(date).toDateString());
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function isConflict(date, startTime, endTime, teacher, room) {
  const sheet = SpreadsheetApp.getActive().getSheetByName("ScheduleData");
  const data = sheet.getDataRange().getValues();

  const baseDateStr = new Date(date).toDateString();
  const newStart = toMinutes(startTime);
  const newEnd = toMinutes(endTime);

  for (let i = 1; i < data.length; i++) {
    const [d, s, e, t, r] = data[i];
    if (!d || !s || !e || !t || !r) continue;

    const dateStr = new Date(d).toDateString();
    if (dateStr !== baseDateStr) continue;

    const existStart = toMinutes(s);
    const existEnd = toMinutes(e);

    const isOverlap = !(newEnd <= existStart || newStart >= existEnd);

    if ((t === teacher || r === room) && isOverlap) {
      return {
        conflict: true,
        detail: `üìå ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö ${t} ‡∏ó‡∏µ‡πà ${r}`
      };
    }
  }

  return { conflict: false };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: ‡πÅ‡∏õ‡∏•‡∏á "10:30" ‚Üí 630 ‡∏ô‡∏≤‡∏ó‡∏µ
function toMinutes(timeStr) {
  if (typeof timeStr === 'object' && timeStr.getHours) {
    return timeStr.getHours() * 60 + timeStr.getMinutes();
  }

  const parts = timeStr.split(':');
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
}


// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô recurring
function addSchedule(formData) {
  try {
    const { teacher, room, weekday, startTime, endTime } = formData;
    const dayOfWeek = getDayNumber(weekday);
    if (dayOfWeek === -1) return "‚ùå ‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";

    const sMinutes = toMinutes(startTime);
    const eMinutes = toMinutes(endTime);
    if (sMinutes == null || eMinutes == null || eMinutes <= sMinutes) {
      return "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ 00:00 (‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô)";
    }

    const config = SpreadsheetApp.getActive().getSheetByName("Config").getRange("A2:B2").getValues()[0];
    const [startDate, endDate] = [new Date(config[0]), new Date(config[1])];
    const sheet = SpreadsheetApp.getActive().getSheetByName("ScheduleData");

    let currentDate = new Date(startDate);
    let added = 0;
    const conflictSet = new Set();

    while (currentDate <= endDate) {
      if (currentDate.getDay() === dayOfWeek && !isHoliday(currentDate)) {
        const result = isConflict(currentDate, startTime, endTime, teacher, room);
        if (result.conflict) {
          conflictSet.add(result.detail);
        } else {
          const dateStr = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), "yyyy-MM-dd");
          sheet.appendRow([
            dateStr, startTime, endTime, teacher, room, Session.getActiveUser().getEmail()
          ]);
          added++;
        }
      }
      currentDate.setDate(currentDate.getDate() + 1);
    }

    let message = `${added} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`;
    if (conflictSet.size > 0) {
      message += `\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° ${conflictSet.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏ô‡∏Å‡∏±‡∏ö:\n` +
                 [...conflictSet].join('\n');
    }

    return message;

  } catch (err) {
    Logger.log("‚ùå ERROR: " + err.message);
    return `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`;
  }
}

CodeHTML
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 10px;
      }
      label {
        display: block;
        margin-top: 10px;
        font-weight: bold;
      }
      select, button {
        width: 100%;
        padding: 6px;
        margin-top: 5px;
        box-sizing: border-box;
      }
      #status {
        margin-top: 15px;
        white-space: pre-wrap;
        color: #33691e;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <h3>üìÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô</h3>

    <label for="weekday">‡∏ß‡∏±‡∏ô:</label>
    <select id="weekday"></select>

    <label for="startTime">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°:</label>
    <select id="startTime">
      <option value="08:00">08:00</option>
      <option value="09:00">09:00</option>
      <option value="10:00">10:00</option>
      <option value="11:00">11:00</option>
      <option value="12:00">12:00</option>
      <option value="13:00">13:00</option>
      <option value="14:00">14:00</option>
      <option value="15:00">15:00</option>
      <option value="16:00">16:00</option>
      <option value="17:00">17:00</option>
      <option value="18:00">18:00</option>
      <option value="19:00">19:00</option>
      <option value="20:00">20:00</option>
    </select>

    <label for="endTime">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
    <select id="endTime">
      <option value="09:00">09:00</option>
      <option value="10:00">10:00</option>
      <option value="11:00">11:00</option>
      <option value="12:00">12:00</option>
      <option value="13:00">13:00</option>
      <option value="14:00">14:00</option>
      <option value="15:00">15:00</option>
      <option value="16:00">16:00</option>
      <option value="17:00">17:00</option>
      <option value="18:00">18:00</option>
      <option value="19:00">19:00</option>
      <option value="20:00">20:00</option>
    </select>

    <label for="teacher">‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå:</label>
    <select id="teacher"></select>

    <label for="room">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</label>
    <select id="room"></select>

    <button onclick="submitForm()">‚ûï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
    <div id="status"></div>

    <script>
      function submitForm() {
        const data = {
          weekday: document.getElementById("weekday").value,
          startTime: document.getElementById("startTime").value,
          endTime: document.getElementById("endTime").value,
          teacher: document.getElementById("teacher").value,
          room: document.getElementById("room").value,
        };
        document.getElementById("status").innerText = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...";

        google.script.run.withSuccessHandler(function (msg) {
          document.getElementById("status").innerText = msg;
        }).addSchedule(data);
      }

      // ‡πÇ‡∏´‡∏•‡∏î dropdown ‡∏à‡∏≤‡∏Å Apps Script
      function loadDropdowns() {
        google.script.run.withSuccessHandler(function (data) {
          const { weekdays, teachers, rooms } = data;

          const setOptions = (id, list) => {
            const sel = document.getElementById(id);
            list.forEach(item => {
              const opt = document.createElement("option");
              opt.value = item;
              opt.text = item;
              sel.appendChild(opt);
            });
          };

          setOptions("weekday", weekdays);
          setOptions("teacher", teachers);
          setOptions("room", rooms);
        }).getDropdownData();
      }

      loadDropdowns();
    </script>
  </body>
</html>
