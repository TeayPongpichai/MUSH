/‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠/
/***** üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ *****/
const CONFIG = {
  SHEET_NAME: 'Sheet1',
  TEMPLATE_DOC_ID: '1WRLqvWCCrP8hGhSoyqdp4UfZqyyWVEG0Y6qsDtLcEOs',
  OUTPUT_FOLDER_ID: '1YhQtA2W-clbuzB9nB5zIRz98TcgBGSpL',
  HEADER_ROW: 1,
  DOC_URL_HEADER: 'Doc URL',
  // ‡πÉ‡∏ä‡πâ "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  PREVIEW_HEADERS: ['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•','‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó','‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏¥‡∏ç','‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'],
};

/***** ‡πÄ‡∏°‡∏ô‡∏π & Sidebar *****/
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üìÑ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠')
    .addItem('‡πÄ‡∏õ‡∏¥‡∏î Sidebar', 'showMergeSidebar')
    .addToUi();
}

function showMergeSidebar() {
  const html = HtmlService.createTemplateFromFile('Sidebar').evaluate()
    .setTitle('‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠')
    .setWidth(380);
  SpreadsheetApp.getUi().showSidebar(html);
}

/***** ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î *****/
function getRowsPreview() {
  const sh = SpreadsheetApp.getActive().getSheetByName(CONFIG.SHEET_NAME);
  if (!sh) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï ${CONFIG.SHEET_NAME}`);
  const lastRow = sh.getLastRow(), lastCol = sh.getLastColumn();
  if (lastRow <= CONFIG.HEADER_ROW) return [];

  const header = sh.getRange(CONFIG.HEADER_ROW, 1, 1, lastCol).getValues()[0];
  const values = sh.getRange(CONFIG.HEADER_ROW + 1, 1, lastRow - CONFIG.HEADER_ROW, lastCol).getValues();

  const headerIndex = {};
  header.forEach((h,i) => headerIndex[String(h).trim()] = i);

  return values.map((row, i) => {
    const rowNo = CONFIG.HEADER_ROW + 1 + i;
    const parts = CONFIG.PREVIEW_HEADERS.map(h => {
      const idx = headerIndex[h];
      return idx != null ? (row[idx] instanceof Date
        ? Utilities.formatDate(row[idx], Session.getScriptTimeZone(), 'd MMM yy HH:mm')
        : (row[idx] ?? '')) : '';
    }).filter(Boolean);
    return { rowNumber: rowNo, display: parts.join(' | ') || `‡πÅ‡∏ñ‡∏ß ${rowNo}` };
  });
}

/***** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß *****/
function createDocsFromRows(rowNumbers) {
  if (!Array.isArray(rowNumbers) || rowNumbers.length === 0) {
    throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ñ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤');
  }
  const results = [];
  rowNumbers.sort((a,b)=>a-b).forEach(r => {
    results.push(createDocFromRow(r));
  });
  return results;
}

/***** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô) *****/
function createDocFromRow(rowNumber) {
  const sh = SpreadsheetApp.getActive().getSheetByName(CONFIG.SHEET_NAME);
  const lastCol = sh.getLastColumn();
  const header = sh.getRange(CONFIG.HEADER_ROW, 1, 1, lastCol).getValues()[0];
  const data = sh.getRange(rowNumber, 1, 1, lastCol).getValues()[0];

  const kv = {};
  header.forEach((h,i) => {
    const key = String(h || '').trim();
    if (key) kv[key] = toText(data[i]);
  });

  const namePart  = kv['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] || kv['‡∏ä‡∏∑‡πà‡∏≠'] || `Row${rowNumber}`;
  const topicPart = kv['‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'] || kv['‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á'] || '';
  const fileName = `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£-${namePart}${topicPart ? ' - ' + topicPart : ''}`.substring(0,140);

  const template = DriveApp.getFileById(CONFIG.TEMPLATE_DOC_ID);
  const copy = template.makeCopy(fileName);
  if (CONFIG.OUTPUT_FOLDER_ID) {
    const folder = DriveApp.getFolderById(CONFIG.OUTPUT_FOLDER_ID);
    folder.addFile(copy); DriveApp.getRootFolder().removeFile(copy);
  }

  const doc = DocumentApp.openById(copy.getId());
  const body = doc.getBody();
  Object.keys(kv).forEach(k => {
    body.replaceText(escapeForRegExp(`{{${k}}}`), kv[k]);
  });
  doc.saveAndClose();

  const urlCol = ensureDocUrlColumn(sh, header);
  sh.getRange(rowNumber, urlCol).setValue(copy.getUrl());

  return { rowNumber, fileName, url: copy.getUrl(), fileId: copy.getId() };
}

/***** Utils *****/
function toText(v){
  if (v == null) return '';
  if (v instanceof Date) return Utilities.formatDate(v, Session.getScriptTimeZone(), 'd MMM yy HH:mm');
  return String(v);
}
function escapeForRegExp(t){ return t.replace(/[.*+?^${}()|[\]\\]/g,'\\$&'); }
function ensureDocUrlColumn(sh, header){
  let idx = header.findIndex(h => String(h).trim() === CONFIG.DOC_URL_HEADER);
  if (idx >= 0) return idx + 1;
  const col = sh.getLastColumn() + 1;
  sh.getRange(CONFIG.HEADER_ROW, col).setValue(CONFIG.DOC_URL_HEADER);
  return col;
}

<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <meta charset="utf-8">
  <style>
    body{font-family:system-ui,Arial;padding:12px}
    h3{margin:0 0 8px}
    .row{display:flex;gap:8px;align-items:center}
    input,button,select{width:100%;padding:6px}
    #rowSelect{height:300px}
    .muted{color:#666;font-size:12px;margin-top:8px}
    .ok{color:#0a7a3c}.err{color:#b00020}

    /* ---- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ---- */
    .btn-primary {
      background-color: #06A3DA; /* ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
      color: white; /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ */
      border: none; /* ‡πÄ‡∏≠‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å */
      cursor: pointer; /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏°‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡πâ */
    }
    .btn-primary:hover {
      background-color: #0582b1; /* (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ä‡∏µ‡πâ */
    }
    /* ------------------------ */

  </style>
</head>
<body>
  <!-- üî∞ ‡πÇ‡∏•‡πÇ‡∏Å‡πâ -->
  <img class="logo" src="https://sh.mahidol.ac.th/img/Logo/Logo_th.png" alt="Mahidol Logo">
  <h3 style="font-size:16px;">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß</h3>

  <div class="row">
    <input id="search" type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á..." oninput="filterOptions()">
  </div>

  <div class="row" style="margin-top:8px;">
    <!-- multiple selection -->
    <select id="rowSelect" multiple></select>
  </div>

  <div class="row" style="margin-top:8px;">
    <!-- üëá ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° class="btn-primary" ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ -->
    <button class="btn-primary" onclick="createMany()">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</button>
  </div>

  <div id="msg" class="muted"></div>

  <script>
    let allRows = [];

    document.addEventListener('DOMContentLoaded', () => {
      google.script.run.withSuccessHandler(rows => {
        allRows = rows || [];
        render(allRows);
        setMsg(`‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${allRows.length} ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡πâ‡∏ß`);
      }).withFailureHandler(showError).getRowsPreview();
    });

    function render(rows){
      const sel = document.getElementById('rowSelect');
      sel.innerHTML = '';
      rows.forEach(r=>{
        const opt = document.createElement('option');
        opt.value = r.rowNumber;
        opt.textContent = `‡πÅ‡∏ñ‡∏ß ${r.rowNumber} ‚Äî ${r.display}`;
        sel.appendChild(opt);
      });
    }

    function filterOptions(){
      const q = document.getElementById('search').value.trim().toLowerCase();
      const filtered = !q ? allRows : allRows.filter(r => (r.display||'').toLowerCase().includes(q));
      render(filtered);
    }

    function createMany(){
      const sel = document.getElementById('rowSelect');
      const chosen = Array.from(sel.selectedOptions).map(o => Number(o.value));
      if (chosen.length === 0){ setMsg('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏ñ‡∏ß', true); return; }

      setMsg(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${chosen.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`);
      google.script.run.withSuccessHandler(res=>{
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
        const links = (res||[]).map(r => `<li>‡πÅ‡∏ñ‡∏ß ${r.rowNumber}: <a href="${r.url}" target="_blank">${r.fileName}</a></li>`).join('');
        setMsg(`<b>‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</b> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${res.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:<ul>${links}</ul>`, false, true);
      }).withFailureHandler(showError)
        .createDocsFromRows(chosen);
    }

    function setMsg(text, isErr=false, asHtml=false){
      const el = document.getElementById('msg');
      el.className = 'muted ' + (isErr ? 'err' : 'ok');
      if (asHtml) el.innerHTML = text; else el.textContent = text;
    }
    function showError(err){ setMsg(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err && err.message ? err.message : err}`, true); }
  </script>
</body>
</html>