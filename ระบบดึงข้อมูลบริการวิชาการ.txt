/‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£/
// Function to run when the spreadsheet is opened. It adds a custom menu.
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('üìå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£')
    .addItem('‡πÄ‡∏õ‡∏¥‡∏î Sidebar', 'showSidebar')
    .addToUi();
}

// Function to show the sidebar.
function showSidebar() {
  const html = HtmlService.createHtmlOutputFromFile('Sidebar')
    .setTitle('‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£')
    .setWidth(300);
  SpreadsheetApp.getUi().showSidebar(html);
}

// Function to get unique names from Sheet1 to populate the dropdown in the sidebar.
// This function will be called from the client-side (Sidebar.html).
function getUniqueNames() {
  try {
    const sheet1 = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Sheet1');
    if (!sheet1) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ 'Sheet1'");
    }
    // Get all names from column B (‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•), starting from row 2 to exclude header
    const dataRange = sheet1.getRange(2, 2, sheet1.getLastRow() - 1, 1);
    const names = dataRange.getValues().flat().filter(String); // .flat() converts 2D array to 1D, .filter(String) removes empty values
    
    // Return a sorted list of unique names
    return [...new Set(names)].sort(); 
  } catch (e) {
    Logger.log(e.toString());
    return []; // Return an empty array on error
  }
}

// Main function to process the selected name and generate data in Sheet2.
// This function will be called from the client-side (Sidebar.html).
function processSelectedName(selectedName) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet1 = ss.getSheetByName('Sheet1');
    if (!sheet1) {
      return "Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ 'Sheet1'";
    }

    // Get or create Sheet2
    let sheet2 = ss.getSheetByName('Sheet2');
    if (sheet2) {
      sheet2.clear(); // Clear existing data if Sheet2 exists
    } else {
      sheet2 = ss.insertSheet('Sheet2');
    }

    // --- Get data from Sheet1 ---
    const data = sheet1.getDataRange().getValues();
    const headers = data.shift(); // Remove header row and store it

    // Find column indexes dynamically (this is more robust than using fixed numbers)
    const nameColIndex = headers.indexOf('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•');
    const dateColIndex = headers.indexOf('‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£');
    const typeColIndex = headers.indexOf('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£');
    const detailsColIndex = headers.indexOf('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î_‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢_‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°');

    // Check if all required columns were found
    if ([nameColIndex, dateColIndex, typeColIndex, detailsColIndex].includes(-1)) {
        return "Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Sheet1 ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏±‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£', '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î_‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢_‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'";
    }
    
    // --- Prepare data for Sheet2 ---
    const outputHeaders = ["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ß‡∏±‡∏ô_‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"];
    const outputData = [];

    // Filter data based on selected name
    data.forEach(row => {
      if (row[nameColIndex] === selectedName) {
        // Create a new row with data in the desired order for Sheet2
        const newRow = [
          row[nameColIndex],      // ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•
          row[dateColIndex],      // ‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          row[typeColIndex],      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
          row[detailsColIndex]    // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...
        ];
        outputData.push(newRow);
      }
    });

    // --- Write data to Sheet2 ---
    sheet2.getRange(1, 1, 1, outputHeaders.length).setValues([outputHeaders]).setFontWeight('bold');
    
    if (outputData.length > 0) {
      sheet2.getRange(2, 1, outputData.length, outputData[0].length).setValues(outputData);
      sheet2.autoResizeColumns(1, outputHeaders.length); // Adjust column widths
    }
    
    return `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á '${selectedName}' ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${outputData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Sheet2 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`;
  } catch (e) {
    return "Error: " + e.toString();
  }
}

<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <style>
      body {
        font-family: Arial, sans-serif;
        padding: 10px;
      }
      select, button {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        border-radius: 4px;
        border: 1px solid #ccc;
      }
      button {
        background-color: #06A3DA;
        color: white;
        font-weight: bold;
        cursor: pointer;
      }
      button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
      }
      #status {
        margin-top: 15px;
        font-size: 0.9em;
        color: #333;
      }
    </style>
  </head>
  <body>
    <!-- üî∞ ‡πÇ‡∏•‡πÇ‡∏Å‡πâ -->
  <img class="logo" src="https://sh.mahidol.ac.th/img/Logo/Logo_th.png" alt="Mahidol Logo">
    <div>
      <label for="name-select">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</label>
      <select id="name-select">
        <option value="">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</option>
      </select>
      
      <button id="create-btn" onclick="generateData()">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Sheet2</button>
      
      <div id="status"></div>
    </div>

    <script>
      // This function runs when the sidebar is loaded
      window.onload = function() {
        google.script.run.withSuccessHandler(populateNames).getUniqueNames();
      };

      // Callback function to populate the dropdown with names from the server
      function populateNames(names) {
        const select = document.getElementById('name-select');
        select.innerHTML = ''; // Clear the "loading" message
        
        if (names && names.length > 0) {
          names.forEach(function(name) {
            const option = document.createElement('option');
            option.value = name;
            option.textContent = name;
            select.appendChild(option);
          });
        } else {
          const option = document.createElement('option');
          option.textContent = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠';
          option.disabled = true;
          select.appendChild(option);
          document.getElementById('create-btn').disabled = true;
        }
      }

      // Function to call the server-side script when the button is clicked
      function generateData() {
        const selectedName = document.getElementById('name-select').value;
        if (!selectedName) {
          document.getElementById('status').textContent = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô';
          return;
        }
        
        const btn = document.getElementById('create-btn');
        const statusDiv = document.getElementById('status');
        
        // Disable button and show processing message
        btn.disabled = true;
        statusDiv.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...';

        google.script.run
          .withSuccessHandler(onSuccess)
          .withFailureHandler(onFailure)
          .processSelectedName(selectedName);
      }

      // Callback function for a successful operation
      function onSuccess(message) {
        const btn = document.getElementById('create-btn');
        const statusDiv = document.getElementById('status');
        
        statusDiv.textContent = message;
        btn.disabled = false; // Re-enable the button
      }

      // Callback function for a failed operation
      function onFailure(error) {
        const btn = document.getElementById('create-btn');
        const statusDiv = document.getElementById('status');
        
        statusDiv.textContent = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message;
        btn.disabled = false; // Re-enable the button
      }
    </script>
  </body>
</html>