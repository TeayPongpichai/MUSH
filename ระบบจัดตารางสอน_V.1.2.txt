CodeGS
// üü© ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu("üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")
    .addItem("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô", "showScheduleForm")
    .addToUi();
}

// üü© ‡πÅ‡∏™‡∏î‡∏á Sidebar
function showScheduleForm() {
  const html = HtmlService.createHtmlOutputFromFile("ScheduleForm")
    .setTitle("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")
    .setWidth(400);
  SpreadsheetApp.getUi().showSidebar(html);
}

// üü© ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dropdown list
function getDropdownData() {
  const ss = SpreadsheetApp.getActive();
  const getList = (sheetName) => {
    const sheet = ss.getSheetByName(sheetName);
    return sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues().flat();
  };
  return {
    teachers: getList("Teachers"),
    rooms: getList("Rooms"),
    weekdays: getList("Weekdays")
  };
}

// üü© ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 0‚Äì6
function getDayNumber(thaiDay) {
  const map = {
    "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå": 0, "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": 1, "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": 2, "‡∏û‡∏∏‡∏ò": 3,
    "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ": 4, "‡∏®‡∏∏‡∏Å‡∏£‡πå": 5, "‡πÄ‡∏™‡∏≤‡∏£‡πå": 6
  };
  return map[thaiDay] ?? -1;
}

// üü© ‡πÅ‡∏õ‡∏•‡∏á Date ‚Üí ‡∏ß‡∏±‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function getThaiDayName(date) {
  const days = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
  return days[date.getDay()];
}

// üü© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
function isHoliday(date) {
  const holidays = SpreadsheetApp.getActive().getSheetByName("HolidayList")
    .getRange(2, 1, SpreadsheetApp.getActive().getSheetByName("HolidayList").getLastRow() - 1, 1)
    .getValues().flat().map(d => new Date(d).toDateString());
  return holidays.includes(new Date(date).toDateString());
}

// üü© ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
function toMinutes(timeStr) {
  if (typeof timeStr === 'object' && timeStr.getHours) {
    return timeStr.getHours() * 60 + timeStr.getMinutes();
  }
  const parts = timeStr.split(':');
  return parseInt(parts[0]) * 60 + parseInt(parts[1]);
}

// üü© ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isConflict(date, startTime, endTime, teacher, room) {
  const sheet = SpreadsheetApp.getActive().getSheetByName("ScheduleData");
  const data = sheet.getDataRange().getValues();
  const baseDateStr = new Date(date).toDateString();
  const newStart = toMinutes(startTime);
  const newEnd = toMinutes(endTime);

  for (let i = 1; i < data.length; i++) {
    const [d, , , t, r] = data[i];
    const s = data[i][2 - 1]; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
    const e = data[i][3 - 1]; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î

    if (!d || !s || !e || !t || !r) continue;
    if (new Date(d).toDateString() !== baseDateStr) continue;

    const existStart = toMinutes(s);
    const existEnd = toMinutes(e);
    const isOverlap = !(newEnd <= existStart || newStart >= existEnd);

    if ((t === teacher || r === room) && isOverlap) {
      return {
        conflict: true,
        detail: `üìå ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö ${t} ‡∏ó‡∏µ‡πà ${r}`
      };
    }
  }
  return { conflict: false };
}

// üü© ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö recurring
function addSchedule(formData) {
  try {
    const { teacher, room, weekday, startTime, endTime } = formData;
    const dayOfWeek = getDayNumber(weekday);
    if (dayOfWeek === -1) return "‚ùå ‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";

    const sMinutes = toMinutes(startTime);
    const eMinutes = toMinutes(endTime);
    if (sMinutes == null || eMinutes == null || eMinutes <= sMinutes) {
      return "‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ 00:00 (‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô)";
    }

    const config = SpreadsheetApp.getActive().getSheetByName("Config").getRange("A2:B2").getValues()[0];
    const [startDate, endDate] = [new Date(config[0]), new Date(config[1])];
    const sheet = SpreadsheetApp.getActive().getSheetByName("ScheduleData");

    let currentDate = new Date(startDate);
    let added = 0;
    const conflictSet = new Set();

    while (currentDate <= endDate) {
      if (currentDate.getDay() === dayOfWeek && !isHoliday(currentDate)) {
        const result = isConflict(currentDate, startTime, endTime, teacher, room);
        if (result.conflict) {
          conflictSet.add(result.detail);
        } else {
          const dateStr = Utilities.formatDate(currentDate, Session.getScriptTimeZone(), "yyyy-MM-dd");
          const thaiDay = getThaiDayName(currentDate);
          sheet.appendRow([
            dateStr, thaiDay, startTime, endTime, teacher, room, Session.getActiveUser().getEmail()
          ]);
          added++;
        }
      }
      currentDate.setDate(currentDate.getDate() + 1);
    }

    let message = `${added} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß`;
    if (conflictSet.size > 0) {
      message += `\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° ${conflictSet.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏ô‡∏Å‡∏±‡∏ö:\n` +
                 [...conflictSet].join('\n');
    }
    return message;

  } catch (err) {
    Logger.log("‚ùå ERROR: " + err.message);
    return `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`;
  }
}
